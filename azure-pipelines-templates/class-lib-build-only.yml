# Copyright (c) .NET Foundation and Contributors
# Portions Copyright (c) Sankarsan Kampa (a.k.a. k3rn31p4nic).  All rights reserved.
# See LICENSE file in the project root for full license information.

parameters:
  - name: skipNuGetRestore
    type: boolean
    default: false
  - name: skipNuGetCache
    type: boolean
    default: false
  - name: gitUser
    type: string
    default: nfbot
  - name: gitEmail
    type: string
    default: nanoframework@outlook.com
  - name: skipSonarCloudAnalysis
    type: boolean
    default: false
  - name: sonarCloudProject
    type: string
    default: dummy-key
  - name: nugetConfigPath
    type: string
    default: ''
  - name: runUnitTests
    type: boolean
    default: false
  - name: unitTestRunsettings
    type: string
    default: '$(System.DefaultWorkingDirectory)\.runsettings'

steps:
# need this here in order to persist GitHub credentials 
- checkout: self
  submodules: true

- script: |
    git config --global user.email ${{ parameters.gitEmail }}
    git config --global user.name ${{ parameters.gitUser }}
    git config --global core.autocrlf true
  displayName: Setup git identity

# get commit details
- template: get-commit-details.yml

- template: file-checks.yml

- template: install-nbgv-tool.yml

- template: prepare-release.yml

- task: SonarCloudPrepare@2
  condition: >-
    and(
      succeeded(),
      eq(variables['StartReleaseCandidate'], false),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v')),
      not(${{ parameters.skipSonarCloudAnalysis }})
    )
  displayName: 'Prepare analysis on SonarCloud'
  inputs:
    SonarCloud: 'sonarcloud-$(System.TeamProject)'
    organization: 'nanoframework'
    scannerMode: 'MSBuild'
    projectKey: '${{ parameters.sonarCloudProject }}'
    extraProperties: |
     sonar.exclusions=**/obj/**,**/*.dll
     sonar.cs.vscoveragexml.reportsPaths=$(Agent.TempDirectory)/**/**.coverage
     sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/**/**.trx

- task: InstallNanoMSBuildComponents@1
  condition: >-
    and(
      succeeded(),
      eq(variables['StartReleaseCandidate'], false),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    )
  displayName: Install .NET nanoFramework MSBuild components
  inputs:
    GitHubToken: $(GitHubToken)

- template: install-nuget.yml
- template: cache-nano-nugets.yml
  parameters:
    skipNuGetCache: ${{ parameters.skipNuGetCache }}

- task: NuGetCommand@2
  condition: >-
    and(
      succeeded(),
      not(${{ parameters.skipNuGetRestore }}),
      eq(variables['StartReleaseCandidate'], false),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    )
  displayName: NuGet restore
  retryCountOnTaskFailure: 5
  inputs:
    restoreSolution: '**/*.sln'
    ${{ if eq(parameters.nugetConfigPath, '') }}:
      feedsToUse: select
    ${{ else }}:
      feedsToUse: config
    nugetConfigPath: ${{ parameters.nugetConfigPath }}

- template: versions-check.yml

- task: VSBuild@1
  condition: >-
    and(
      succeeded(),
      eq(variables['StartReleaseCandidate'], false),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    )
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    msbuildArgs: '/p:PublicRelease=true'
    configuration: '$(buildConfiguration)'
    msbuildArchitecture: 'x64'
    maximumCpuCount: true

- template: run-unit-tests.yml
  parameters:
    runUnitTests: '${{ parameters.runUnitTests }}'
    unitTestRunsettings: '${{ parameters.unitTestRunsettings }}'

- template: get-assembly-native-version.yml

- powershell: |
    # get subject and commit message for commit
    $commitMessage = git log --format='%B' -1

    # need to flatten message by removing new lines
    $commitMessage = $commitMessage -replace "`r`n", " "

    if($commitMessage -like "*PUBLISH_RELEASE*")
    {
        # set variable
        Write-Host "$("##vso[task.setvariable variable=RELEASE_DRAFT;isOutput=true]")false"
        Write-Host "$("##vso[task.setvariable variable=RELEASE_VERSION;isOutput=true]")true"
        Write-Host "Release draft: FALSE"
    }
    else
    {
        # set variable
        Write-Host "$("##vso[task.setvariable variable=RELEASE_DRAFT;isOutput=true]")true"
        Write-Host "$("##vso[task.setvariable variable=RELEASE_VERSION;isOutput=true]")false"
        Write-Host "Release draft: TRUE"
    }
  name: SetReleaseDraftVar
  condition: >-
    and(
      succeeded(),
      eq(variables['StartReleaseCandidate'], false)
    )
  displayName: Set release draft var

- task: SonarCloudAnalyze@2
  condition: >-
    and(
      succeeded(),
      eq(variables['StartReleaseCandidate'], false),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v')),
      not(${{ parameters.skipSonarCloudAnalysis }})
    )
  displayName: 'Run Code Analysis'

- task: SonarCloudPublish@2
  condition: >-
    and(
      succeeded(),
      eq(variables['StartReleaseCandidate'], false),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v')),
      not(${{ parameters.skipSonarCloudAnalysis }})
    )
  displayName: 'Publish Quality Gate Result'
  inputs:
    pollingTimeoutSec: '300'

- task: UseRubyVersion@0
  condition: >-
    and(
      succeeded(),
      eq(variables['System.PullRequest.PullRequestId'], ''),
      not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')),
      eq(variables['StartReleaseCandidate'], false)
    )
  displayName: Setup Ruby
  inputs:
    versionSpec: '= 3.0' 
    addToPath: true
