# Copyright (c) .NET Foundation and Contributors
# See LICENSE file in the project root for full license information.

parameters:
  - name: repositoriesToUpdate
    type: string
    default: ''
  - name: waitBeforeUpdate
    type: boolean
    default: false

steps:
- task: PowerShell@2
  displayName: Update dependent class libs
  condition: >-
    and(
      succeeded(),
      ne(variables['StartReleaseCandidate'], 'true'),
      or(
        startsWith(variables['Build.SourceBranch'], 'refs/heads/main'),
        contains(variables['GetCommitDetails.COMMIT_MESSAGE'], '***UPDATE_DEPENDENTS***'),
        eq(variables['UPDATE_DEPENDENTS'], 'true')
      )
    )
  env:
    REPOS_TO_UPDATE: ${{ parameters.repositoriesToUpdate }}
    GITHUB_TOKEN: $(GitHubToken)
    WAIT_BEFORE_UPDATE: ${{ parameters.waitBeforeUpdate }}
  inputs:
    targetType: 'inline'
    script: |

      if ($env:WAIT_BEFORE_UPDATE -eq "true")
      {
          # wait 15 minutes to allow nuget package to go through validation and indexing
          'Waiting 15 minutes to allow package indexing...' | Write-Host -ForegroundColor Yellow

          Start-Sleep -Seconds (15 * 60)
      }

      $librariesToUpdate = $env:REPOS_TO_UPDATE.Split([environment]::NewLine)
    
      ForEach($library in $librariesToUpdate)
      {
          # remove quotes, if any
          $library = $library -replace "'", ""

          "" | Write-Host
          "*******************************" | Write-Host
          "Updating '$library'" | Write-Host

          $requestContent = @{event_type="update-dependencies"} | ConvertTo-Json
          $requestUrl = "https://api.github.com/repos/nanoframework/$library/dispatches"
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

          # compute authorization header in format "AUTHORIZATION: basic 'encoded token'"
          # 'encoded token' is the Base64 of the string "nfbot:personal-token"
          $auth = "basic $([System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("nfbot:$env:GITHUB_TOKEN"))))"

          $headers = @{}
          $headers.Add("Authorization","$auth")
          $headers.Add("Accept","application/vnd.github.v3+json")

          try 
          {
              $result = Invoke-RestMethod -Method Post -UserAgent [Microsoft.PowerShell.Commands.PSUserAgent]::InternetExplorer -Uri  $requestUrl -Header $headers -ContentType "application/json" -Body $requestContent
              'Triggering GitHub Action to update dependencies...' | Write-Host -NoNewline
              'OK' | Write-Host -ForegroundColor Green

              # give some slack for the next action to start the decrease the likelihood of hitting the GitHub API rate limit
              Start-Sleep -Seconds (63)
          }
          catch 
          {
              $result = $_.Exception.Response.GetResponseStream()
              $reader = New-Object System.IO.StreamReader($result)
              $reader.BaseStream.Position = 0
              $reader.DiscardBufferedData()
              $responseBody = $reader.ReadToEnd();

              throw "Error firing GitHub action: $responseBody"
          }
      }
